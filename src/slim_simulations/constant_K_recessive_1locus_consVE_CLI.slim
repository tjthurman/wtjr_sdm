/*
#####################################
##      Simulation initiation      ##
#####################################
*/

// For the one-locus genetic architecture,
// just calling it "corin" to keep the code adaptation easy

// set up a simple neutral nonWF simulation
initialize() {
	
	// Set up some constants when running interactively,
	// will be able to run in Snakemake in the future
	
	// Will do the phenotypic scale in terms of brown.
	// This is the opposite of the linear models in the text.
	// In the text, higher PC1 == more white,
	// and the linear models in S11 have positive Betas (for the
	// effects of the white allele on PC1).
	
	// For this, I will flip it: 
	// higher PC scores and more alleles == more brown
	// I linearly re-scale the PC scores into 
	// a 0-1 interval, based on the min-max of the average PC1 score
	// across genotype categories (Fig 2F) (rescale -6 to 4 into 0 to 1). 
	if (exists("slimgui"))
	{
		defineGlobal("K", 2750);	// carrying capacity		
		defineConstant("initFreqCorin", 0.0); // initial Corin brown allele frequency
		defineConstant("initPopSize", 7250); // initial population size
		defineConstant("initOptPheno", 0.13); // initial optimum phenotype on 0-1 scale
		defineConstant("finalOptPheno", 0.876); //final optimum phenotype on 0-1 scale
		defineConstant("generations", 80); //generations to simulate
		defineConstant("fitFuncWidth", 0.65); // SD of fitness function, normal dist 0.65
		defineConstant("V_E", 3.59206); // Input V_E, calculated from other sims
		defineConstant("offspringPoisLambda", 5); // Mean of Poisson dist for # of offspring generated (not surviving) for each pair.
		defineConstant("replicate", 1);
		defineConstant("outputDir", "~/Desktop/slim_testing");
	}
	
	
	// Initialize some constants that we won't vary for now, that I did vary during testing.
	// Can always go back to varying them if we decide to	
	defineConstant("phenoPCMin", -6.48); // Minimum PC1 phenotype score, for rescaling
	defineConstant("phenoPCMax", 3.66); // Maximum PC1 phenotype score, for rescaling
	defineConstant("maxLowDensBenefit", 1.0); // Maximum fitness benefit at low density	
	
	initializeSLiMModelType("nonWF");
	
	// Neutral mutation type.
	// just needed for our spacer regions for visualizing
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	m1.convertToSubstitution = T;
		
	// mutations representing alleles in QTLs
	// Simple addivity, with a fixed effect of 0 (neutral to fitness)
	// All fitness calculation will be through the geno-pheno map, below. 
	// mutation type m2 for corin
	initializeMutationType("m2", 0.5, "f", 0);
	initializeGenomicElementType("g2", m2, 1);
	
	
	// Set up our "chromosome"
	// Really, just doing a two-locus model. Need them to be unlinked.
	// Will add some empty space to ease visualization
	initializeGenomicElement(g1, 0, 99);
	initializeGenomicElement(g2, 100, 100); // First one is corin
	initializeGenomicElement(g1, 101, 199);
	
	// Define mutation and recombination rates
	// No mutation
	initializeMutationRate(0);
	// No recombination
	initializeRecombinationRate(rates = 0);
	
	
	
	
	// Check if overall output directory exists, create if not
	if (!fileExists(outputDir)) 
	{
		createDirectory(outputDir);
	}
	
	// Build a base filename to be used, based on the parameters we vary
	baseFileName = "gens" + generations +
						"_K" + K + 
						"_initPop" + initPopSize +
						"_iCorin" + initFreqCorin +
						"_initOpt" + initOptPheno +
						"_finalOpt" + finalOptPheno +
						"_sel" + fitFuncWidth +
						"_Ve" + V_E +
						"_lambda" + offspringPoisLambda +
						"_rep" + replicate;

	// Define filenames for the log files
	defineConstant("earlyResultsFile", outputDir + "/" + baseFileName + "_early.csv");
	defineConstant("lateResultsFile", outputDir + "/" + baseFileName + "_late.csv");
	
	// Write seed out to a file
	writeFile(outputDir  + "/" + baseFileName + "_seed.txt", asString(getSeed()));

}


// create an initial population of individuals
// With allele frequencies as specified
1 early() {

	sim.addSubpop("p1", initPopSize);
	
	// Add "brown" alleles at the specified starting frequency at each locus
	corinTargets = sample(p1.genomes, asInteger(length(p1.genomes)*initFreqCorin));
	corinTargets.addNewDrawnMutation(m2, 100);

	
	// Initialize some variables that will hold logging info,
	// but need to be set at "NA" to start to avoid csv output issues
	p1.setValue("offspring_generated", "NA");
	p1.setValue("avg_offspring", "NA");
	p1.setValue("mating_pairs", "NA");

	// Reschedule the end of the simulation, for however long we wanted to run the simulation for. 
	sim.rescheduleScriptBlock(s2, start = generations, end = generations);	
}





/*
###############################
##      GENERATION CYCLE     ##
##        REPRODUCTION       ##
###############################
*/



// each individual reproduces itself once
reproduction() {
	
	// First, randomly order the individuals
	// to ensure there aren't any issues with non-random mating or inbreeding
	// as Slim does not guarantee inds will be ordered randomly in the sim
	parents = sample(p1.individuals, p1.individualCount);
	// Initialize an offsrping coutner, for tracking offsrping generated each gen
	offspring = 0;
	
	
	// Pair up the randomized inidividuals
	for (i in seq(0, p1.individualCount - 2, by=2)) {
		parent1 = parents[i]; 
		parent2 = parents[i + 1]; 
		
		// for each mating pair, choose a number of offspring generated
		// this could be 0, based on the random poisson 
		pairOffspring = rpois(1, offspringPoisLambda);
		
		// Then generate the offspring for that pair
		for (j in seqLen(pairOffspring)) {
		
			p1.addCrossed(parent1, parent2);
			// And add the offsrping to the Tally			
			offspring = offspring + 1;
		}
	}
	
	// Get some metrics to save:
	// number of mating pairs, total offsrping generated, and average offsrping per pair
	// Need to save these as population values for some reason: can't define global variables in a reproduction block??
	
	mating_pairs = length(seq(0, p1.individualCount - 2, by=2));
	p1.setValue("offspring_generated", offspring);	
	p1.setValue("avg_offspring", offspring/mating_pairs);
	p1.setValue("mating_pairs", mating_pairs);
	
	// Now, we're done with reproduction for this generation.
	// Usually, the reproduction callback is called once for each individual, so we disable this
	// block for the current generation (so it is only called the once). 
	self.active = 0;
}



/*
###############################
##      GENERATION CYCLE     ##
##        	 EARLY           ##
###############################
*/


// Every generation, calculate phenotype from genotype, 
// mismatch from phenotype,
// and fitness from mistmatch for every individual.
// All fitness recalculating is done here, instead of in fitness callbacks. 

// For this, we're doing it as recessive, and with the complete switch
// 

early() {
	// Get phenotype from genotype
	inds = sim.subpopulations.individuals;
	
	// recessive, one locus effect
	corin_effects = asInteger(inds.countOfMutationsOfType(m2) == 2)*(1.92 + 3.15)*2;
	
	
	// Use Mafalda's lm to get additive pheno type, on the PCA scale. 
	add_pheno_PC = -6.48 + corin_effects;
	
	
	// Next, we add in noise to get an overall phenotype.
	// We can call the noise V_E, such that V_A + V_E = V_P.
	// Already figured out appropriate V_E through other sims, 
	// pass that in as a parameter
	
	// This is taken from section 13.4 in the SLiM manual
	defineGlobal("V_A", var(add_pheno_PC));
	
	// Then, generate vector of inidividual phenotypic noises,
	// from a normal distribution with an sd based on V_E
	noise_pheno_PC = rnorm(size(inds), 0.0, sqrt(V_E));

	// Finally, add the additive phenos with the noise to get the final pheno, on the PCA scale.
	phenos_PC = add_pheno_PC + noise_pheno_PC;
	
	// Calculate overall phenotypic variance and realized heritability
	// using the phenotypes before they were rescaled between 0 and 1. 
	defineGlobal("V_P", var(phenos_PC));
	defineGlobal("obs_H2", V_A/V_P);
	

	// Next, rescale phenotype to the 0 to 1 scale
	rescaleMin = phenoPCMin;
	rescaleMax = phenoPCMax;
	phenos_rescaled = (phenos_PC - rescaleMin)/(rescaleMax - rescaleMin); 
	
	
	// Individuals can go outside 0 to 1 range with the environmental noise added in
	// Make one more variable, truncating those to between 0 and 1, to use for mismatch calculation. 	
	// rescale the PC phenos to be between 0 and 1, like the GLMs. 
	phenos_01 = ifelse(phenos_rescaled > 1, asFloat(1), phenos_rescaled);
	phenos_01 = ifelse(phenos_01 < 0, asFloat(0), phenos_01);
	 
	// Assign the calculated phenotypes as inidividual properties, for storage
	inds.tagF = phenos_rescaled; // scaled phenotype
		
	// Get optimal phenotype, based on generation
	defineGlobal("optimum", initOptPheno + (finalOptPheno - initOptPheno)/generations*sim.generation);
	
	
	// Get individual fitnesses, based on individual phenotype and optimal phenotype
	// calculate mismatch
	mismatch = optimum - phenos_01;
	// Fitness as a Gaussian function of mismatch, with width determined by parameter
	inds.fitnessScaling = exp(-1 *(mismatch^2)/(2*fitFuncWidth^2));


	// simple density dependence,
	// with a maxmimum benefit
	// currently, we're setting maxbenefit to 1, so there's no fitness benefit when below K
	p1.fitnessScaling = min(K / p1.individualCount, maxLowDensBenefit);
		
	// Save some globals for writing out to the log file
	defineGlobal("inds_pre_selection", p1.individualCount);
	defineGlobal("pheno_mean_early", myMean(phenos_rescaled));
	defineGlobal("pheno_sd_early", mySD(phenos_rescaled));
	defineGlobal("mean_w_prescale", myMean(inds.fitnessScaling));
	defineGlobal("scaling_factor", p1.fitnessScaling);
	defineGlobal("mean_age_early", myMean(inds.age));
	defineGlobal("max_age_early", myMax(inds.age));
	defineGlobal("perc_younger2_early", sum(inds.age < 2)/inds_pre_selection);
	defineGlobal("freq_corin", sum(inds.countOfMutationsOfType(m2))/length(p1.genomes));
	
	
	// Write the log line
	writeLogLineEarly(earlyResultsFile);
}


/*
##############################
##   Selection occurs here  ##
##############################
*/

// That's all handled by Slim. On to the Late generation cycle, where we just 
// do some logging of who survived. 

/*
###############################
##      GENERATION CYCLE     ##
##        	 LATE           ##
###############################
*/


late() {
	// Get all surviving individuals
	inds_late = sim.subpopulations.individuals;
	
	
	// Save some globals for the log file
	defineGlobal("pheno_mean_late", myMean(inds_late.tagF));
	defineGlobal("pheno_sd_late", mySD(inds_late.tagF));
	defineGlobal("offspring_surviving", sum(inds_late.age == 0));
	
	if (sim.generation == 1) {
		defineGlobal("lev_surv_rate", "NA");
		defineGlobal("avg_surv_offspring", "NA");
	} else {
		defineGlobal("lev_surv_rate", offspring_surviving/asInteger(p1.getValue("offspring_generated")));
		defineGlobal("avg_surv_offspring", offspring_surviving/p1.getValue("mating_pairs"));
	}
	defineGlobal("pop_surv_rate", p1.individualCount/inds_pre_selection);
	defineGlobal("mean_age_late", myMean(inds_late.age));
	defineGlobal("max_age_late", myMax(inds_late.age));
	defineGlobal("perc_younger2_late", sum(inds_late.age < 2)/p1.individualCount);
	defineGlobal("freq_corin", sum(inds_late.countOfMutationsOfType(m2))/length(p1.genomes));
	
	// write the log line	
  	writeLogLineLate(lateResultsFile);
  	
  	// Terminate the simulation if population is 2 or less
  	if (length(inds_late) <=2) {
  		sim.simulationFinished();
  	}
  
}

// If populations don't go extinct, finish the simulation with this block,
// which gets rescheduled at the very beginning
s2 999 late() {
	sim.simulationFinished();
}





/*
#####################################
##      User-defined functions     ##
#####################################
*/


// mySD: a replacement for the built-in sd function, which returns NA, instead of NULL, when the length of the vector
// is 0 or 1. This has very little effect, really, but avoids weird output CSV in the edge case where
// the population is going extinct and there is only 1 surviving individual. 
// returns as a string, but thats fine for us: we're only printing, not calculating. 
function (string)mySD(numeric x) {

	if (length(x) <= 1) {
	result = "NA";
	} else {
	result = asString(sd(x));
	}
	
	return result;
}

// my Mean, another replacement function to return NA, instead of NULL, when length of the vector is 0.
// Again, only needed in rare edge cases, and returns as a string
function (string)myMean(numeric x) {

	if (length(x) < 1) {
	result = "NA";
	} else {
	result = asString(mean(x));
	}
	
	return result;
}

// myMax, another replacement function to return NA, instead of NULL, when length of the vector is 0.
// Again, only needed in rare edge cases, and returns as a string
function (string)myMax(numeric x) {

	if (length(x) < 1) {
	result = "NA";
	} else {
	result = asString(max(x));
	}
	
	return result;
}


// A function for writing out the logging info during the early stage of the generation cycle
// Focus here is on pre-selection phenotypes, heritability, and fitness
function (void)writeLogLineEarly(string filename) {

	if (sim.generation == 1) // If the first generation, write out the header
	{ // Initialize the output .csv
		writeFile(filename, paste("generation", 
										  "stage",
										  "K",
										  "N",
										  "opt_pheno",
										  "mean_pheno",
										  "sd_pheno",
										  "Va",
										  "Ve",
										  "Vp",
										  "obs_H2",
										  "mean_w_prescale",
										  "scaling_factor",
										  "mean_age",
										  "perc_young2",
										  "max_age",
										  "freq_corin",
										  sep = ","));
	
	}
	
	// For all generations, including the first, write the data lines
	line = paste(sim.generation,
					 "early",
					 K,
					 p1.individualCount,
					 optimum,
					 pheno_mean_early,
					 pheno_sd_early,
					 V_A,
					 V_E,
					 V_P,
					 obs_H2,
					 mean_w_prescale,
					 scaling_factor,	
					 mean_age_early,
					 perc_younger2_early,
					 max_age_early,
					 freq_corin,	 
					 sep = ",");
	writeFile(filename, line, append = T);

	// return nothing
	return;
}



// A function for writing out the logging info during the late stage of the generation cycle
// Focus here is on offspring production and survival rates
function (void)writeLogLineLate(string filename) {

	if (sim.generation == 1) // If the first generation, write out the header
	{ // Initialize the output .csv
		writeFile(filename, paste("generation", 
										  "stage",
										  "K",
										  "N",
										  "opt_pheno",
										  "mean_pheno",
										  "sd_pheno",
										  "mating_pairs",
										  "offspring_generated",
										  "offspring_survived",
										  "avg_offspring_gen",
										  "avg_offspring_surv",
										  "leveret_survival",
										  "pop_survival",
										  "mean_age",
										  "perc_young2",
										  "max_age",
										  "freq_corin",
										  sep = ","));
	
	}
	
	// For all generations, including the first, write the data lines
	line = paste(sim.generation,
					 "late",
					 K,
					 p1.individualCount,
					 optimum,
					 pheno_mean_late,
					 pheno_sd_late,
					 p1.getValue("mating_pairs"),
					 p1.getValue("offspring_generated"),
					 offspring_surviving,
					 p1.getValue("avg_offspring"),
					 avg_surv_offspring,
					 lev_surv_rate,
					 pop_surv_rate,
					 mean_age_late,
					 perc_younger2_late,
					 max_age_late,
					 freq_corin,	 
					 sep = ",");
	writeFile(filename, line, append = T);

	// return nothing
	return;
}
